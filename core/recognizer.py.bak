# -*- coding: utf-8 -*-
# @Time    : 2017/9/2 13:40
# @Author  : 郑梓斌

import json
import os

import requests
import numpy as np
import  dlib

from time import time

PREDICTOR_PATH = "./shape_predictor_68_face_landmarks.dat"
SCALE_FACTOR = 1
FEATHER_AMOUNT = 11

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(PREDICTOR_PATH)


FACE_POINTS = list(range(0, 68))
JAW_POINTS = list(range(0, 17))
LEFT_EYE_POINTS = list(range(37, 40))
LEFT_BROW_POINTS = list(range(18, 22))
MOUTH_POINTS = list(range(49, 55))
LIP_POINTS = list(range(61,65))
NOSE_POINTS = list(range(28, 36))
RIGHT_EYE_POINTS = list(range(43, 47))
RIGHT_BROW_POINTS = list(range(23,27))

LEFT_FACE = list(range(0, 9)) + list(range(18, 22))+list(range(61,63))
RIGHT_FACE = list(range(9, 17)) + list(range(23, 27))+list(range(63,65))


JAW_END = 17
FACE_START = 0
FACE_END = 68

OVERLAY_POINTS = [
    LEFT_FACE,
    RIGHT_FACE,
    JAW_POINTS,
]

class TooManyFace(Exception):
    pass
class NoFaces(Exception):
    pass


def face_points(image):
    # points = []
    # txt = image + '.txt'
    #
    # if os.path.isfile(txt):
    #     with open(txt) as file:
    #         for line in file:
    #             points = line
    # elif os.path.isfile(image):
    #     points = landmarks_by_face__(image)
    #     with open(txt, 'w') as file:
    #         file.write(str(points))
    #
    # faces = json.loads(points)['faces']
    #
    # if len(faces) == 0:
    #     err = 404
    # else:
    #     err = 0
    #
    # matrix_list = np.matrix(matrix_marks(faces[0]['landmark']))
    #
    # point_list = []
    # for p in matrix_list.tolist():
    #     point_list.append((int(p[0]), int(p[1])))
    start = time()
    rects = detector(image,1)
    stop = time()
    print(str(stop-start)+"秒")
    # if len(rects) > 1:
    #     raise  TooManyFace
    # if len(rects) ==0:
    #     raise NoFaces

    matrix_list = np.matrix([[p.x,p.y] for p in (predictor(image, rects[0]).parts())])
    point_list = []
    for p in matrix_list.tolist():
        point_list.append((int(p[0]),int (p[1])))
    # print(point_list)
    return matrix_list, point_list,


    # return matrix_list, point_list, err


# def landmarks_by_face__(image):
#     url = 'https://api-cn.faceplusplus.com/facepp/v3/detect'
#     params = {
#         'api_key': 'LdQT9TzbQBYttnQ6wGeblcW1UT0UhWDx',
#         'api_secret': 'NBRWDCTKnraBu7kygsoAMv5seFZSe3e7',
#         'return_landmark': 1
#     }
#     file = {'image_file': open(image, 'rb')}
#
#     r = requests.post(url=url, files=file, data=params)
#
#     if r.status_code == requests.codes.ok:
#         return r.content.decode('utf-8')
#     else:
#         return r.content


def matrix_rectangle(left, top, width, height):
    pointer = [
        (left, top),
        (left + width / 2, top),
        (left + width - 1, top),
        (left + width - 1, top + height / 2),
        (left, top + height / 2),
        (left, top + height - 1),
        (left + width / 2, top + height - 1),
        (left + width - 1, top + height - 1)
    ]

    return pointer

